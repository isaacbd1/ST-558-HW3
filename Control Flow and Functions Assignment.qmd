---
title: "Control Flow and Functions Assignment"
format: html
editor: visual
---

Before we begin, we need to load the data from the file hw2_list.rda.

```{r}
load("hw2_list.rda")
```

This gives us a list called bp_list with 2 elements called "treatment" and "placebo" (both being data frames) in our environment.

```{r}
bp_list
```

## Task 1: Control Flow Practice

First, we extract the data frames from the list we loaded.

```{r}
treatment_df <- bp_list$treatment
placebo_df <- bp_list$placebo
```

Next, we create a new column for each data frame called status.

```{r}
treatment_df$status <- character(20)
placebo_df$status <- character(10) #10 since placebo_df has just 10 rows
```

Now, first for the treatment data frame, we write a for loop to create the status column's values.

```{r}
for (i in 1:20) {
  if (treatment_df$post_bp[i] <= 120) {
    treatment_df$status[i] <- "Optimal"
  } 
  else if (treatment_df$post_bp[i] > 120 & treatment_df$post_bp[i] <= 130) {
    treatment_df$status[i] <- "Borderline"
  } 
  else if (treatment_df$post_bp[i] > 130) {
    treatment_df$status[i] <- "High"
  }
  else {
    next
  }
}
```

To show our code is working as intended, below we display the new treatment data frame with the updated status entries.

```{r}
treatment_df
```

Lastly, we do almost the same thing, but now for the placebo data frame.

```{r}
for (i in 1:10) {
  if (placebo_df$post_bp[i] <= 120) {
    placebo_df$status[i] <- "Optimal"
  } 
  else if (placebo_df$post_bp[i] > 120 & placebo_df$post_bp[i] <= 130) {
    placebo_df$status[i] <- "Borderline"
  } 
  else if (placebo_df$post_bp[i] > 130) {
    placebo_df$status[i] <- "High"
  }
  else {
    next
  }
}
```

And below is the new placebo data frame with the status entries updated.

```{r}
placebo_df
```

## Task 2: Function Writing

Next we want to write a function that takes in two data frames as input, takes in a statistic that would act on columns of the data frames (with default being the mean), and returns a list consisting of 6 labeled statistics obtained by having the user-given statistic act on the pre, post, and diff columns of the data frames. 

```{r}
summaryStatistics <- function(treatment, placebo, stat = "mean") {
  my_fun <- get(stat) #retrieves the statistic used as argument
  
  #vector consisting of statistics on the pre, post, and diff columns of each data frame
  statistics <- c(my_fun(treatment$pre_bp), my_fun(treatment$post_bp), 
                  my_fun(treatment$diff_bp), my_fun(placebo$pre_bp),
                  my_fun(placebo$post_bp), my_fun(placebo$diff_bp))
  
  #labels for each statistic
  labels <- c(paste("pre_treatment", stat, sep="_"), paste("post_treatment", stat, sep="_"), 
              paste("diff_treatment", stat, sep="_"), paste("pre_placebo", stat, sep="_"), 
              paste("post_placebo", stat, sep="_"), paste("diff_placebo", stat, sep="_"))
  
  names(statistics) <- labels #applies the labels to the statistics
  
  return (as.list(statistics))
}
```

Applying our function to the two data frames from the previous task, if we do not specify an argument for the statistic, we see that the mean of the pre, post, and diff columns are returned in a list format:

```{r}
summaryStatistics(treatment_df, placebo_df)
```

Next we will apply our function to the two data frames, this time specifying the statistic as "var" (i.e. variance), "sd" (i.e. standard deviation), "min", and "max."

```{r}
summaryStatistics(treatment_df, placebo_df, stat = "var")
```
```{r}
summaryStatistics(treatment_df, placebo_df, stat = "sd")
```
```{r}
summaryStatistics(treatment_df, placebo_df, stat = "min")
```
```{r}
summaryStatistics(treatment_df, placebo_df, stat = "max")
```
